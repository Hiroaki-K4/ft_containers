[1mdiff --git a/containers/vector.hpp b/containers/vector.hpp[m
[1mindex 2d59cf1..e50452d 100644[m
[1m--- a/containers/vector.hpp[m
[1m+++ b/containers/vector.hpp[m
[36m@@ -6,13 +6,14 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2022/06/27 22:49:02 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2022/07/18 21:32:11 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2022/07/18 22:34:48 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
 #ifndef VECTOR_HPP[m
 # define VECTOR_HPP[m
 [m
[32m+[m[32m#include <limits>[m
 #include <memory>[m
 #include <iterator>[m
 #include <deque>[m
[36m@@ -98,7 +99,10 @@[m [mclass vector {[m
         // reverse_iterator rend() {return reverse_iterator{first_}};[m
 [m
         size_type size() const {return end() - begin();}[m
[31m-        // size_type max_size() const {};[m
[32m+[m[32m        size_type max_size() const[m
[32m+[m[32m        {[m
[32m+[m[32m            return std::min(static_cast<size_type>(std::numeric_limits<difference_type>::max() / sizeof(value_type)), alloc_.max_size());[m
[32m+[m[32m        }[m
         bool empty() const {return begin() == end();}[m
         size_type capacity() const {return reserved_last_ - first_;}[m
 [m
[36m@@ -125,6 +129,8 @@[m [mclass vector {[m
 [m
         void reserve(size_type n)[m
         {[m
[32m+[m[32m            if (n > max_size())[m
[32m+[m[32m                throw std::length_error("ft::vector::reserve");[m
             if (n <= capacity())[m
                 return ;[m
             pointer new_first = alloc_.allocate(n);[m
[1mdiff --git a/tester/main.cpp b/tester/main.cpp[m
[1mindex 4768092..80d410a 100644[m
[1m--- a/tester/main.cpp[m
[1m+++ b/tester/main.cpp[m
[36m@@ -6,12 +6,13 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2022/06/26 21:12:49 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2022/07/18 21:18:11 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2022/07/18 22:35:13 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
 #include <iostream>[m
 #include "vector.hpp"[m
[32m+[m[32m#include <vector>[m
 [m
 [m
 int main(void) {[m
[36m@@ -19,6 +20,14 @@[m [mint main(void) {[m
 [m
     std::cout << "[v1 test]" << std::endl;[m
     ft::vector<int> v_1;[m
[32m+[m[32m    std::vector<int> v_tmp;[m
[32m+[m[32m    try {[m
[32m+[m[32m        std::cout << "v1 reserve(max_size() + 1)"  << std::endl;[m
[32m+[m[32m        v_1.reserve(v_1.max_size() + 1);[m
[32m+[m[32m    }[m
[32m+[m[32m    catch (const std::length_error& le) {[m
[32m+[m[32m        std::cerr << "Length error: " << le.what() << '\n';[m
[32m+[m[32m    }[m
     std::cout << "v1 size(): " << v_1.size() << std::endl;[m
     std::cout << "v1 empty(): " << v_1.empty() << std::endl;[m
     v_1.push_back(1);[m
